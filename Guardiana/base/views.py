from django import forms
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse

import pandas as pd 
import numpy as np 
import pefile
import pickle

# Create your views here.
def index(request):
    return render(request, 'index.html')

def upload_executable(request):
    if request.method == 'GET':
        return render(request, 'upload.html')  # Return the rendered template

def getback(request):
    if request.method == "POST":
        filler_resume = request.FILES.get('file', '')
        features = extract_pe_features(filler_resume)
        
        # Convert boolean values to integers (0 and 1)
        for k, v in features.items():
            if isinstance(v, bool):
                features[k] = int(v)
            elif isinstance(v, str) and v.lower() in ['true', 'false']:
                features[k] = int(v.lower() == 'true')
        
        for feature, value in features.items():
            print(f"{feature}: {value}")
        
        feature_values = [list(features.values())]
        feature_names = list(features.keys())
        
        df = pd.DataFrame(feature_values, columns=feature_names)
        df.to_csv('extracted_features.csv', index=False)
        print(df)
        
        skew_list = ['NumberOfSections', 'TimeDateStamp', 'Characteristics', 'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode', 'SizeOfInitializedData', 'SizeOfUninitializedData', 'AddressOfEntryPoint', 'BaseOfCode', 'FileAlignment', 'MajorOperatingSystemVersion', 'MajorImageVersion', 'SizeOfImage', 'SizeOfHeaders', 'CheckSum', 'text_Misc_VirtualSize', 'text_VirtualAddress', 'text_SizeOfRawData', 'text_PointerToRawData', 'data_Misc_VirtualSize', 'data_VirtualAddress', 'data_SizeOfRawData', 'data_PointerToRawData', 'rdata_Misc_VirtualSize', 'rdata_VirtualAddress', 'rdata_SizeOfRawData', 'rdata_PointerToRawData', 'rsrc_Misc_VirtualSize', 'rsrc_VirtualAddress', 'rsrc_SizeOfRawData', 'rsrc_PointerToRawData', 'rsrc_Characteristics', 'reloc_Misc_VirtualSize', 'reloc_VirtualAddress', 'reloc_SizeOfRawData', 'reloc_PointerToRawData']
        
        # Apply log1p transformation to selected columns and print the transformed DataFrame
        for column in skew_list:
            if column in df.columns:
                df[column] = np.log1p(df[column])
        
        print(df)
        
        extra_features = ['text_Characteristics', 'data_Characteristics', 'rsrc_Characteristics', 'text_PointerToRawData']
        df.drop(columns=extra_features, inplace=True)
        
        with open('rf_model.pkl', 'rb') as file:
            rf_model = pickle.load(file)
        
        # Make predictions using the loaded model
        predictions = rf_model.predict(df.values)
        
        # Print the predicted label on the terminal
        print("Predicted label:", predictions)

    return render(request, "index.html")


def extract_pe_features(file_path):
    pe_features = {
        'corexemain': 0,
        'msvbvm60.dll': 0,
        'e_lfanew': 0,
        'NumberOfSections': 0,
        'TimeDateStamp': 0,
        'Characteristics': 0,
        'MajorLinkerVersion': 0,
        'SizeOfCode': 0,
        'SizeOfInitializedData': 0,
        'AddressOfEntryPoint': 0,
        'BaseOfCode': 0,
        'MajorImageVersion': 0,
        'SizeOfImage': 0,
        'CheckSum': 0,
        'DllCharacteristics': 0,
        'text_Misc_VirtualSize': 0,
        'text_VirtualAddress': 0,
        'text_SizeOfRawData': 0,
        'data_Misc_VirtualSize': 0,
        'data_VirtualAddress': 0,
        'data_SizeOfRawData': 0,
        'data_PointerToRawData': 0,
        'rsrc_Misc_VirtualSize': 0,
        'rsrc_VirtualAddress': 0,
        'rsrc_SizeOfRawData': 0,
        'rsrc_PointerToRawData': 0,
        'reloc_VirtualAddress': 0,
        'reloc_PointerToRawData': 0
    }

    try:
        # Load the PE file
        pe = pefile.PE(data=file_path.read())

        # Extract individual features
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
            exported_symbols = [entry.name.decode('utf-8').lower() for entry in pe.DIRECTORY_ENTRY_EXPORT.symbols]
            pe_features['corexemain'] = str('corexemain' in exported_symbols)
        else:
            pe_features['corexemain'] = 0

        # Extract PE header features
        pe_features['e_lfanew'] = pe.DOS_HEADER.e_lfanew
        pe_features['NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
        pe_features['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
        pe_features['Characteristics'] = pe.FILE_HEADER.Characteristics
        pe_features['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        pe_features['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
        pe_features['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        pe_features['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        pe_features['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        pe_features['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
        pe_features['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
        pe_features['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        pe_features['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics

        # Extract section features
        for section in pe.sections:
            section_name = section.Name.decode('utf-8').rstrip('\x00').lower()
            if section_name == '.reloc':
                pe_features['reloc_VirtualAddress'] = section.VirtualAddress
            elif section_name == '.text':
                pe_features['text_Misc_VirtualSize'] = section.Misc_VirtualSize
                pe_features['text_VirtualAddress'] = section.VirtualAddress
                pe_features['text_SizeOfRawData'] = section.SizeOfRawData
                pe_features['text_PointerToRawData'] = section.PointerToRawData
                pe_features['text_Characteristics'] = section.Characteristics
            elif section_name == '.data':
                pe_features['data_Misc_VirtualSize'] = section.Misc_VirtualSize
                pe_features['data_VirtualAddress'] = section.VirtualAddress
                pe_features['data_SizeOfRawData'] = section.SizeOfRawData
                pe_features['data_PointerToRawData'] = section.PointerToRawData
                pe_features['data_Characteristics'] = section.Characteristics
            elif section_name == '.rsrc':
                pe_features['rsrc_Misc_VirtualSize'] = section.Misc_VirtualSize
                pe_features['rsrc_VirtualAddress'] = section.VirtualAddress
                pe_features['rsrc_SizeOfRawData'] = section.SizeOfRawData
                pe_features['rsrc_PointerToRawData'] = section.PointerToRawData
                pe_features['rsrc_Characteristics'] = section.Characteristics

        # Extract DLL features
        pe_features['msvbvm60.dll'] = 1 if 'msvbvm60.dll' in [entry.dll.decode('utf-8').lower() for entry in pe.DIRECTORY_ENTRY_IMPORT] else 0

    except Exception as e:
        print(f"Error extracting features: {e}")
    
    return pe_features
