from django import forms
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse

import pandas as pd 
import numpy as np 
import pefile


# Create your views here.
def index(request):
    return render(request, 'index.html')

def upload_executable(request):
    if request.method == 'GET':
        return render(request, 'upload.html')  # Return the rendered template

def getback(request):
    if request.method=="POST":
        print("hello")
        filler_resume=request.FILES.get('file','')
        features = extract_pe_features(filler_resume)
        for feature, value in features.items():
            print(f"{feature}:Â {value}")
        

    return render(request,"index.html")


def extract_pe_features(file_path):
    pe_features = {}

    try:
        # Load the PE file
        pe = pefile.PE(data=file_path.read())

        # Extract individual features
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
            exported_symbols = [entry.name.decode('utf-8').lower() for entry in pe.DIRECTORY_ENTRY_EXPORT.symbols]
            pe_features['corexemain'] = 'corexemain' in exported_symbols
        else:
            pe_features['corexemain'] = 0

        # Extract PE header features
        pe_features['e_lfanew'] = pe.DOS_HEADER.e_lfanew
        pe_features['NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
        pe_features['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
        pe_features['Characteristics'] = pe.FILE_HEADER.Characteristics
        pe_features['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        pe_features['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
        pe_features['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        pe_features['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        pe_features['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        pe_features['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
        pe_features['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
        pe_features['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        pe_features['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics

        # Extract section features
        for section in pe.sections:
            section_name = section.Name.decode('utf-8').rstrip('\x00')
            pe_features[f'{section_name}_Misc_VirtualSize'] = section.Misc_VirtualSize
            pe_features[f'{section_name}_VirtualAddress'] = section.VirtualAddress
            pe_features[f'{section_name}_SizeOfRawData'] = section.SizeOfRawData
            pe_features[f'{section_name}_PointerToRawData'] = section.PointerToRawData

    except Exception as e:
        print(f"Error extracting features: {e}")
    
    return pe_features
